<!DOCTYPE html>

<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>シンプル家計簿</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide-react/0.263.1/lucide-react.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif; }
    </style>
</head>
<body>
    <div id="root"></div>

```
<script type="text/babel">
    const { useState } = React;
    const { Plus, Trash2, Calendar } = lucide;

    const SimpleBudgetApp = () => {
      // 月の基本設定
      const [monthlySettings] = useState({
        totalBudget: 100000,
        foodBudgetPerWeek: 9000,
        miscBudgetTotal: 55000
      });

      // 最終営業日の前日を計算（土日の場合は金曜）
      const getLastPayDay = (year, month) => {
        const lastDay = new Date(year, month, 0);
        let lastBusinessDay = new Date(lastDay);
        while (lastBusinessDay.getDay() === 0 || lastBusinessDay.getDay() === 6) {
          lastBusinessDay.setDate(lastBusinessDay.getDate() - 1);
        }
        let payDay = new Date(lastBusinessDay);
        payDay.setDate(payDay.getDate() - 1);
        if (payDay.getDay() === 0) {
          payDay.setDate(payDay.getDate() - 2);
        } else if (payDay.getDay() === 6) {
          payDay.setDate(payDay.getDate() - 1);
        }
        return payDay;
      };

      // 給料日設定（現在の月を基準に自動計算）
      const getCurrentPayDay = () => {
        const now = new Date();
        const year = now.getFullYear();
        const month = now.getMonth() + 1;
        return getLastPayDay(year, month);
      };

      const [payDay] = useState(getCurrentPayDay().toISOString().split('T')[0]);

      const [expenses, setExpenses] = useState(() => {
        const saved = localStorage.getItem('budgetExpenses');
        return saved ? JSON.parse(saved) : [];
      });
      
      const [newExpense, setNewExpense] = useState({
        category: 'food',
        item: '',
        amount: '',
        date: new Date().toISOString().split('T')[0]
      });
      const [selectedWeek, setSelectedWeek] = useState(0);
      const [editingExpense, setEditingExpense] = useState(null);

      // データをローカルストレージに保存
      React.useEffect(() => {
        localStorage.setItem('budgetExpenses', JSON.stringify(expenses));
      }, [expenses]);

      // 週の情報を計算（5週制）
      const calculateWeeks = () => {
        const startDate = new Date(payDay);
        const startYear = startDate.getFullYear();
        const startMonth = startDate.getMonth() + 1;
        
        const nextMonth = startMonth === 12 ? 1 : startMonth + 1;
        const nextYear = startMonth === 12 ? startYear + 1 : startYear;
        const endDate = getLastPayDay(nextYear, nextMonth);
        
        const totalDaysInMonth = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
        const dailyFoodBudget = 45000 / totalDaysInMonth;
        
        const weeks = [];
        let currentDate = new Date(startDate);
        let totalAllocated = 0;
        
        for (let weekNum = 0; weekNum < 5; weekNum++) {
          const weekStart = new Date(currentDate);
          let weekEnd;
          
          if (weekNum === 0) {
            const dayOfWeek = weekStart.getDay();
            if (dayOfWeek === 0) {
              weekEnd = new Date(weekStart);
            } else {
              const daysToSunday = 7 - dayOfWeek;
              weekEnd = new Date(weekStart);
              weekEnd.setDate(weekEnd.getDate() + daysToSunday);
            }
          } else if (weekNum === 4) {
            const dayOfWeek = currentDate.getDay();
            let mondayDate = new Date(currentDate);
            
            if (dayOfWeek !== 1) {
              const daysToMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;
              mondayDate.setDate(mondayDate.getDate() + daysToMonday);
            }
            
            weekStart.setTime(mondayDate.getTime());
            weekEnd = new Date(endDate);
          } else {
            const dayOfWeek = currentDate.getDay();
            let mondayDate = new Date(currentDate);
            
            if (dayOfWeek !== 1) {
              const daysToMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;
              mondayDate.setDate(mondayDate.getDate() + daysToMonday);
            }
            
            weekStart.setTime(mondayDate.getTime());
            weekEnd = new Date(weekStart);
            weekEnd.setDate(weekEnd.getDate() + 6);
          }
          
          const daysInWeek = Math.ceil((weekEnd - weekStart) / (1000 * 60 * 60 * 24)) + 1;
          
          let foodBudget;
          if (weekNum === 4) {
            foodBudget = 45000 - totalAllocated;
          } else {
            foodBudget = Math.round(dailyFoodBudget * daysInWeek);
            totalAllocated += foodBudget;
          }
          
          weeks.push({
            id: weekNum,
            name: `${weekNum + 1}週目`,
            startDate: weekStart,
            endDate: weekEnd,
            foodBudget: foodBudget,
            daysInWeek: daysInWeek,
            dailyBudget: Math.round(dailyFoodBudget * 100) / 100,
            totalDaysInMonth: totalDaysInMonth,
            period: `${weekStart.getMonth() + 1}/${weekStart.getDate()}-${weekEnd.getMonth() + 1}/${weekEnd.getDate()}`
          });
          
          currentDate = new Date(weekEnd);
          currentDate.setDate(currentDate.getDate() + 1);
        }
        
        return weeks;
      };

      const [weeks] = useState(calculateWeeks());

      // 支出を追加
      const addExpense = () => {
        if (!newExpense.item || !newExpense.amount || !newExpense.date) return;
        
        const expense = {
          id: Date.now(),
          category: newExpense.category,
          item: newExpense.item,
          amount: parseInt(newExpense.amount),
          weekId: selectedWeek,
          date: newExpense.date
        };
        
        setExpenses([...expenses, expense]);
        setNewExpense({ 
          category: 'food', 
          item: '', 
          amount: '', 
          date: new Date().toISOString().split('T')[0]
        });
      };

      // 支出を更新
      const updateExpense = () => {
        if (!editingExpense || !editingExpense.item || !editingExpense.amount || !editingExpense.date) return;
        
        setExpenses(expenses.map(expense => 
          expense.id === editingExpense.id 
            ? { ...editingExpense, amount: parseInt(editingExpense.amount) }
            : expense
        ));
        setEditingExpense(null);
      };

      // 編集をキャンセル
      const cancelEdit = () => {
        setEditingExpense(null);
      };

      // 編集開始
      const startEdit = (expense) => {
        setEditingExpense({ ...expense, amount: expense.amount.toString() });
      };

      // 支出を削除
      const deleteExpense = (expenseId) => {
        setExpenses(expenses.filter(expense => expense.id !== expenseId));
      };

      // 週の食費残額計算
      const calculateFoodRemaining = (weekId) => {
        const weekExpenses = expenses.filter(
          expense => expense.category === 'food' && expense.weekId === weekId
        );
        const spent = weekExpenses.reduce((sum, expense) => sum + expense.amount, 0);
        return weeks[weekId].foodBudget - spent;
      };

      // 月の食費残額計算
      const calculateMonthlyFoodRemaining = () => {
        const foodExpenses = expenses.filter(expense => expense.category === 'food');
        const spent = foodExpenses.reduce((sum, expense) => sum + expense.amount, 0);
        return 45000 - spent;
      };

      // 月の雑費残額計算
      const calculateMiscRemaining = () => {
        const miscExpenses = expenses.filter(expense => expense.category === 'misc');
        const spent = miscExpenses.reduce((sum, expense) => sum + expense.amount, 0);
        return monthlySettings.miscBudgetTotal - spent;
      };

      // 現在の週の支出
      const currentWeekExpenses = expenses.filter(expense => expense.weekId === selectedWeek);

      return React.createElement('div', { className: "max-w-md mx-auto bg-gray-50 min-h-screen" }, 
        // ヘッダー
        React.createElement('div', { className: "bg-blue-600 text-white p-4" },
          React.createElement('h1', { className: "text-xl font-bold text-center" }, "シンプル家計簿"),
          React.createElement('div', { className: "text-center mt-2 text-blue-100" }, 
            `管理期間: ${new Date(payDay).getMonth() + 1}/${new Date(payDay).getDate()}〜`
          )
        ),

        // 週選択
        React.createElement('div', { className: "p-4 bg-white border-b" },
          React.createElement('div', { className: "grid grid-cols-5 gap-2" },
            weeks.map((week, index) =>
              React.createElement('button', {
                key: week.id,
                onClick: () => setSelectedWeek(index),
                className: `p-2 rounded text-sm font-medium ${
                  selectedWeek === index
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-700'
                }`
              }, week.name)
            )
          )
        ),

        // 現在の週の情報
        React.createElement('div', { className: "p-4 bg-white border-b" },
          React.createElement('div', { className: "flex items-center justify-center mb-3" },
            React.createElement(Calendar, { className: "w-4 h-4 mr-2 text-gray-600" }),
            React.createElement('span', { className: "text-gray-600" }, weeks[selectedWeek].period)
          ),
          
          React.createElement('div', { className: "grid grid-cols-2 gap-3" },
            // 食費
            React.createElement('div', { className: "bg-green-50 p-3 rounded-lg" },
              React.createElement('h3', { className: "font-semibold text-green-800 mb-2" }, "食費"),
              
              // 週の食費
              React.createElement('div', { className: "mb-3" },
                React.createElement('div', { className: "text-xs text-green-600 mb-1" }, 
                  `週予算: ¥${weeks[selectedWeek].foodBudget.toLocaleString()}`
                ),
                React.createElement('div', { 
                  className: `text-lg font-bold ${
                    calculateFoodRemaining(selectedWeek) >= 0 ? 'text-green-700' : 'text-red-600'
                  }`
                }, `週残: ¥${calculateFoodRemaining(selectedWeek).toLocaleString()}`)
              ),
              
              // 月の食費
              React.createElement('div', { className: "border-t border-green-200 pt-2" },
                React.createElement('div', { className: "text-xs text-green-600 mb-1" }, "月予算: ¥45,000"),
                React.createElement('div', { 
                  className: `text-sm font-semibold ${
                    calculateMonthlyFoodRemaining() >= 0 ? 'text-green-700' : 'text-red-600'
                  }`
                }, `月残: ¥${calculateMonthlyFoodRemaining().toLocaleString()}`)
              )
            ),

            // 雑費
            React.createElement('div', { className: "bg-purple-50 p-3 rounded-lg" },
              React.createElement('h3', { className: "font-semibold text-purple-800 mb-1" }, "雑費"),
              React.createElement('div', { className: "text-sm text-purple-600" }, 
                `予算: ¥${monthlySettings.miscBudgetTotal.toLocaleString()}`
              ),
              React.createElement('div', { 
                className: `text-lg font-bold ${
                  calculateMiscRemaining() >= 0 ? 'text-purple-700' : 'text-red-600'
                }`
              }, `残: ¥${calculateMiscRemaining().toLocaleString()}`)
            )
          )
        ),

        // 支出入力
        React.createElement('div', { className: "p-4 bg-white border-b" },
          React.createElement('h2', { className: "font-semibold mb-3" }, "支出を追加"),
          
          React.createElement('div', { className: "space-y-3" },
            React.createElement('select', {
              value: newExpense.category,
              onChange: (e) => setNewExpense({...newExpense, category: e.target.value}),
              className: "w-full p-2 border rounded-lg"
            },
              React.createElement('option', { value: 'food' }, "食費"),
              React.createElement('option', { value: 'misc' }, "雑費")
            ),
            
            React.createElement('input', {
              type: 'text',
              placeholder: '項目名（例：コンビニ、洗顔）',
              value: newExpense.item,
              onChange: (e) => setNewExpense({...newExpense, item: e.target.value}),
              className: "w-full p-2 border rounded-lg"
            }),
            
            React.createElement('input', {
              type: 'number',
              placeholder: '金額',
              value: newExpense.amount,
              onChange: (e) => setNewExpense({...newExpense, amount: e.target.value}),
              className: "w-full p-2 border rounded-lg"
            }),
            
            React.createElement('input', {
              type: 'date',
              value: newExpense.date,
              onChange: (e) => setNewExpense({...newExpense, date: e.target.value}),
              className: "w-full p-2 border rounded-lg"
            }),
            
            React.createElement('button', {
              onClick: addExpense,
              className: "w-full bg-blue-600 text-white p-2 rounded-lg font-semibold flex items-center justify-center"
            },
              React.createElement(Plus, { className: "w-4 h-4 mr-2" }),
              "追加"
            )
          )
        ),

        // 支出履歴
        React.createElement('div', { className: "p-4" },
          React.createElement('h2', { className: "font-semibold mb-3" }, 
            `${weeks[selectedWeek].name}の支出`
          ),
          
          currentWeekExpenses.length === 0 ? 
            React.createElement('div', { className: "text-center text-gray-500 py-8" }, 
              "まだ支出がありません"
            ) :
            React.createElement('div', { className: "space-y-2" },
              currentWeekExpenses.map((expense) =>
                React.createElement('div', {
                  key: expense.id,
                  className: "bg-white p-3 rounded-lg border"
                },
                  editingExpense && editingExpense.id === expense.id ? 
                    // 編集モード
                    React.createElement('div', { className: "space-y-2" },
                      React.createElement('select', {
                        value: editingExpense.category,
                        onChange: (e) => setEditingExpense({...editingExpense, category: e.target.value}),
                        className: "w-full p-2 border rounded text-sm"
                      },
                        React.createElement('option', { value: 'food' }, "食費"),
                        React.createElement('option', { value: 'misc' }, "雑費")
                      ),
                      
                      React.createElement('input', {
                        type: 'text',
                        value: editingExpense.item,
                        onChange: (e) => setEditingExpense({...editingExpense, item: e.target.value}),
                        className: "w-full p-2 border rounded text-sm"
                      }),
                      
                      React.createElement('input', {
                        type: 'number',
                        value: editingExpense.amount,
                        onChange: (e) => setEditingExpense({...editingExpense, amount: e.target.value}),
                        className: "w-full p-2 border rounded text-sm"
                      }),
                      
                      React.createElement('input', {
                        type: 'date',
                        value: editingExpense.date,
                        onChange: (e) => setEditingExpense({...editingExpense, date: e.target.value}),
                        className: "w-full p-2 border rounded text-sm"
                      }),
                      
                      React.createElement('div', { className: "flex gap-2" },
                        React.createElement('button', {
                          onClick: updateExpense,
                          className: "flex-1 bg-green-600 text-white p-2 rounded text-sm font-semibold"
                        }, "保存"),
                        React.createElement('button', {
                          onClick: cancelEdit,
                          className: "flex-1 bg-gray-500 text-white p-2 rounded text-sm font-semibold"
                        }, "キャンセル")
                      )
                    ) :
                    // 通常表示モード
                    React.createElement('div', { className: "flex items-center justify-between" },
                      React.createElement('div', { 
                        className: "flex-1", 
                        onClick: () => startEdit(expense),
                        style: { cursor: 'pointer' }
                      },
                        React.createElement('div', { className: "flex items-center mb-1" },
                          React.createElement('span', { 
                            className: `px-2 py-1 text-xs rounded-full mr-2 ${
                              expense.category === 'food' 
                                ? 'bg-green-100 text-green-700'
                                : 'bg-purple-100 text-purple-700'
                            }`
                          }, expense.category === 'food' ? '食費' : '雑費'),
                          React.createElement('span', { className: "font-medium" }, expense.item)
                        ),
                        React.createElement('div', { className: "flex items-center justify-between" },
                          React.createElement('div', { className: "text-lg font-bold text-gray-800" },
                            `¥${expense.amount.toLocaleString()}`
                          ),
                          React.createElement('div', { className: "text-sm text-gray-500" },
                            new Date(expense.date).toLocaleDateString('ja-JP', { month: '1', day: '1' })
                          )
                        )
                      ),
                      React.createElement('button', {
                        onClick: () => deleteExpense(expense.id),
                        className: "text-red-500 hover:text-red-700 p-1 ml-2"
                      },
                        React.createElement(Trash2, { className: "w-4 h-4" })
                      )
                    )
                )
              )
            )
        )
      );
    };

    ReactDOM.render(React.createElement(SimpleBudgetApp), document.getElementById('root'));
</script>
```

</body>
</html>
